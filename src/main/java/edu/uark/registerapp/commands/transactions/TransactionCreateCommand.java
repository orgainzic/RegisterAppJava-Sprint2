package edu.uark.registerapp.commands.transactions;

import edu.uark.registerapp.commands.ResultCommandInterface;
import edu.uark.registerapp.commands.exceptions.UnprocessableEntityException;
import edu.uark.registerapp.models.api.Transaction;
import edu.uark.registerapp.models.entities.TransactionEntity;
import edu.uark.registerapp.models.repositories.TransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.UUID;


@Service
public class TransactionCreateCommand implements ResultCommandInterface<Transaction> {
    @Override
    public Transaction execute() {
        // TODO this.setDefaultProperties();

        // Create a new ENTITY object from the API object details
        // For new transaction the total will default to 0, and only Sales are applicable in current version
        final TransactionEntity transactionEntity =
                this.transactionRepository.save(new TransactionEntity(
                        this.cashierID,
                        0L,
                        1)); // assume type 1 is for Sale

        // Synchronize information generated by the database upon INSERT
        this.apiTransaction = new Transaction(transactionEntity);
//        this.apiTransaction.setId(transactionEntity.getId());
//        this.apiTransaction.setCashierId(transactionEntity.getCashierId());
//        this.apiTransaction.setCreatedOn(transactionEntity.getCreatedOn());
//        this.apiTransaction.setReferenceId(transactionEntity.getReferenceId());
//        this.apiTransaction.setTotal(transactionEntity.getTotal());
//        this.apiTransaction.setType(transactionEntity.getType());

        return this.apiTransaction;
    }

    // Helper Methods
    private void validateProperties() {
        if (this.cashierID.equals(null)) {
            throw new UnprocessableEntityException("cashierID");
        }
    }




    // Properties
    private UUID cashierID;
    public UUID getCashierID() { return this.cashierID; }
    public TransactionCreateCommand setCashierID( final UUID cashierID) {
        this.cashierID = cashierID;
        return this;
    }


    private Transaction apiTransaction;
    public Transaction getApiTransaction() { return this.apiTransaction; }
    public TransactionCreateCommand setApiTransaction(final Transaction apiTransaction) {
        this.apiTransaction = apiTransaction;
        return this;
    }

    @Autowired
    private TransactionRepository transactionRepository;
}
